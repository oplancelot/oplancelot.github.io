I"í;<p>After having a look at <a href="integrating-cdk8s-with-flux.html">how to integrate cdk8s with Flux</a> I was asked whether I could have a look at <a href="https://argoproj.github.io/argo-cd/">Argo CD</a> as well. So without further ado, letâ€™s integrate cdk8s with Argo CD.</p>

<h2 id="argo-cd">Argo CD</h2>

<p>But at first, what is Argo CD? Similar to Flux it realizes Kubernetes Manifest deployments by following the GitOps paradigm. This states that the desired condition of your system should be kept in one or more Git repositories. Tools like Argo CD take care of keeping your system (Kubernetes in this case) and this state in sync. In its simplest form think of a repository containing a single Kubernetes Manifest that defines a Deployment and a Service. Argo CD will make sure to deploy them to your cluster and continue to do so for any new change.</p>

<p>To control Argo CD it ships with a CLI tool and a really nice web UI, that allows you to check for the status of your deployments in real time. Both allow you to create new applications or setup new cluster connections. The latter allow you to use the multi cluster functionality to orchestrate deployments over several clusters with a single instance of Argo CD. Setting one up would be next step from here.</p>

<h2 id="preparation">Preparation</h2>

<p>If you want to follow along you gonna need a running Argo CD instance. Feel free to use <a href="https://gitlab.com/snippets/1967592">my snippet</a> to set one up within 5 minutes. Otherwise go through the official <a href="https://argoproj.github.io/argo-cd/getting_started/">Getting Started</a> guide.</p>

<p>In case you are not familiar with cdk8s make sure to check out <a href="integrating-cdk8s-with-flux.html#cdk8s">this little rundown</a> or <a href="cdk8s-the-future-of-k8s-application-deployments.html">my dedicated blog post</a> that goes into more detail. Otherwise letâ€™s dive right into the action.</p>

<p>At first we need some cdk8s code that we can deploy later on. We are going to use the <a href="https://github.com/argoproj/argocd-example-apps">argocd-example-apps</a> repository as a starting point. It contains the same configuration in different formats, like plain K8s manifests, a Helm Chart or kustomize files all deploying a simple guestbook application consisting of one Deployment and one Service. We are going to put our code into a new folder called <code class="language-plaintext highlighter-rouge">cdk8s-guestbook</code>.</p>

<p>As with every cdk8s application we start by executing <code class="language-plaintext highlighter-rouge">cdk8s init python-app</code>. Iâ€™m going to use Python but feel free to go with TypeScript. Afterwards we define the Deployment and Service objects in the <em>main.py</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
  <span class="n">label</span> <span class="o">=</span> <span class="p">{</span><span class="s">"app"</span><span class="p">:</span> <span class="s">"guestbook-ui"</span><span class="p">}</span>

  <span class="n">k8s</span><span class="p">.</span><span class="n">Service</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'service'</span><span class="p">,</span>
              <span class="n">spec</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">ServiceSpec</span><span class="p">(</span>
                <span class="nb">type</span><span class="o">=</span><span class="s">'LoadBalancer'</span><span class="p">,</span>
                <span class="n">ports</span><span class="o">=</span><span class="p">[</span><span class="n">k8s</span><span class="p">.</span><span class="n">ServicePort</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">target_port</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">IntOrString</span><span class="p">.</span><span class="n">from_number</span><span class="p">(</span><span class="mi">80</span><span class="p">))],</span>
                <span class="n">selector</span><span class="o">=</span><span class="n">label</span><span class="p">))</span>

  <span class="n">k8s</span><span class="p">.</span><span class="n">Deployment</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'deployment'</span><span class="p">,</span>
                 <span class="n">spec</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">DeploymentSpec</span><span class="p">(</span>
                   <span class="n">replicas</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
                   <span class="n">selector</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">LabelSelector</span><span class="p">(</span><span class="n">match_labels</span><span class="o">=</span><span class="n">label</span><span class="p">),</span>
                   <span class="n">template</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">PodTemplateSpec</span><span class="p">(</span>
                     <span class="n">metadata</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">ObjectMeta</span><span class="p">(</span><span class="n">labels</span><span class="o">=</span><span class="n">label</span><span class="p">),</span>
                     <span class="n">spec</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">PodSpec</span><span class="p">(</span><span class="n">containers</span><span class="o">=</span><span class="p">[</span>
                       <span class="n">k8s</span><span class="p">.</span><span class="n">Container</span><span class="p">(</span>
                         <span class="n">name</span><span class="o">=</span><span class="s">'guestbook-ui'</span><span class="p">,</span>
                         <span class="n">image</span><span class="o">=</span><span class="s">'gcr.io/heptio-images/ks-guestbook-demo:0.2'</span><span class="p">,</span>
                         <span class="n">ports</span><span class="o">=</span><span class="p">[</span><span class="n">k8s</span><span class="p">.</span><span class="n">ContainerPort</span><span class="p">(</span><span class="n">container_port</span><span class="o">=</span><span class="mi">80</span><span class="p">)])]))))</span>
<span class="p">...</span>
</code></pre></div></div>

<p>If thatâ€™s done we push the code into a repo that is preferably publicly accessible. Otherwise we need to pass ArgoCD the credentials to the repo later on. Afterwards we can continue with the integration.</p>

<h2 id="integration">Integration</h2>

<p>Currently cdk8s is not supported by Argo CD out-of-the-box. To be able to use it we need to register cdk8s as a custom config management plugin. This works by simply creating/updating the <em>argocd-cm</em> Kubernetes ConfigMap with something like the following content:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.yml</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">configManagementPlugins</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">- name: cdk8s # the name of the plugin that we'll later use to reference it</span>
      <span class="s">init: # some optional preprocessing commands</span>
        <span class="s">command: ["bash"]</span>
        <span class="s">args: ["-c", "pipenv install &amp;&amp; cdk8s import -l python &amp;&amp; cdk8s synth"] # making sure everything is installed and generating the K8s manifest(s)</span>
      <span class="s">generate: # the output of this command will be deployed onto the target cluster</span>
        <span class="s">command: ["bash"]</span>
        <span class="s">args: ["-c", "cat dist/*"] # printing the generated Kubernetes manifests</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">annotations</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app.kubernetes.io/name</span><span class="pi">:</span> <span class="s">argocd-cm</span>
    <span class="na">app.kubernetes.io/part-of</span><span class="pi">:</span> <span class="s">argocd</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">argocd-cm</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">argocd</span>
  <span class="na">selfLink</span><span class="pi">:</span> <span class="s">/api/v1/namespaces/argocd/configmaps/argocd-cm</span>
</code></pre></div></div>

<p>Apply this with <code class="language-plaintext highlighter-rouge">kubectl apply -f config.yml</code> and our plugin is ready to use.</p>

<p>So letâ€™s try it out. Iâ€™m going to use the Argo CD CLI tool but creating the application using the web UI will work as well. After issuing this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>argocd app create guestbook <span class="se">\ </span><span class="c"># creating an application called guestbook</span>
      <span class="nt">--repo</span> https://github.com/brennerm/argocd-example-apps.git <span class="se">\ </span><span class="c"># the URL of our repo</span>
      <span class="nt">--path</span> cdk8s-guestbook <span class="se">\ </span><span class="c"># the path to the folder containing our config</span>
      <span class="nt">--dest-server</span> https://kubernetes.default.svc <span class="se">\ </span><span class="c"># the cluster we want to deploy to</span>
      <span class="nt">--dest-namespace</span> default <span class="se">\ </span><span class="c"># the namespace we want to deploy to</span>
      <span class="nt">--sync-policy</span> automated <span class="se">\ </span><span class="c"># enabling automatic sync of changes in the repo</span>
      <span class="nt">--config-management-plugin</span> cdk8s <span class="c"># make sure to use our cdk8s plugin</span>
</code></pre></div></div>

<p>we end up with the following error:</p>
<blockquote>
  <p>FATA[0006] rpc error: code = InvalidArgument desc = application spec is invalid: InvalidSpecError: Unable to generate manifests in cdk8s-guestbook: rpc error: code = Unknown desc = â€˜bash -c pipenv install &amp;&amp; cdk8s import -l python &amp;&amp; cdk8s synthâ€™ failed exit status 127: bash: pipenv: command not found</p>
</blockquote>

<p>Having some background knowledge of Argo CDâ€™s internals make this issue somewhat predictable. Each config management plugin is being executed in a component called the <em>argocd-repo-server</em>. To make our custom plugin work we also need to make sure that the tools we use are available in this environment. In our case these are <em>pipenv</em> and <em>cdk8s</em>. The proposed solutions are the following:</p>

<ul>
  <li>using volume mounts containing the necessary binaries</li>
  <li>providing a custom image for the <em>argocd-repo-server</em></li>
</ul>

<p>If youâ€™ve read my last post you know that Flux has the exact same problem and that Iâ€™m pretty disappointed by these options. But thatâ€™s what we have to work with. I decided to go with the custom image as it appears easier to me. Below you can find my Dockerfile adding the missing binaries.</p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> argoproj/argocd:latest</span>

<span class="k">USER</span><span class="s"> root</span>

<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>    apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="se">\
</span>        curl <span class="se">\
</span>        python3-pip <span class="o">&amp;&amp;</span> <span class="se">\
</span>    apt-get clean <span class="o">&amp;&amp;</span> <span class="se">\
</span>    pip3 <span class="nb">install </span>pipenv

<span class="k">RUN </span>curl <span class="nt">-sS</span> https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"deb https://dl.yarnpkg.com/debian/ stable main"</span> | <span class="nb">tee</span> /etc/apt/sources.list.d/yarn.list
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> yarn
<span class="k">RUN </span>yarn global add npm cdk8s-cli

<span class="k">USER</span><span class="s"> argocd</span>
</code></pre></div></div>

<p>After building this Dockerfile and pushing the resulting image to a Docker registry of your choice (pro tip: if you are working with <a href="https://kind.sigs.k8s.io/">kind</a> use the really nice <a href="https://kind.sigs.k8s.io/docs/user/quick-start/#loading-an-image-into-your-cluster">load feature</a>) we need to update the <em>argocd-repo-server</em> Kubernetes Deployment to use the new image, e.g. with <code class="language-plaintext highlighter-rouge">kubectl edit -n argocd deployments.apps argocd-repo-server</code>.</p>

<p>If weâ€™ve made sure that the <em>argocd-repo-server</em> pod has been recreated with the new image we can give creating our application a second try. This time everything should work and weâ€™ll end up with the <em>guestbook</em> pod being started.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl get pods
NAME                                                   READY   STATUS              RESTARTS   AGE
cdk8s-guestbook-deployment-967cec91-65b878495d-jcczj   0/1     ContainerCreating   0          16s
</code></pre></div></div>

<p>To make sure Argo CD is properly syncing changes letâ€™s set the <em>replicaCount</em> in the <em>main.py</em> to 2, push the change and et voila:</p>

<figure class="image">
  <img src="/static/images/argocd-replica-count-increase.gif" alt="live update of the replica count change in Argo CD's Web UI" loading="lazy" />
  <figcaption>
    live update of the replica count change in Argo CD's Web UI
    
  </figcaption>
</figure>

<h2 id="conclusion">Conclusion</h2>

<p>So there you have it. A fully functional integration of cdk8s with Argo CD. The main steps being:</p>

<ol>
  <li>registering the cdk8s configuration management plugin</li>
  <li>making the necessary tools available in the <em>argocd-repo-server</em></li>
  <li>using the cdk8s plugin when creating the Argo CD application</li>
</ol>

<p>Iâ€™m still not satisfied with having to customize an internal service to make everything work but AFAIK thereâ€™s currently no way around it. If you know of any better way or see some possible improvements please let me know.</p>

<hr />
:ET