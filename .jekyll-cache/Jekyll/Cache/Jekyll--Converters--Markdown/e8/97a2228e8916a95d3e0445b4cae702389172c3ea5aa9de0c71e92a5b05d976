I"&<p>Ever wondered what happens when you call Python’s built-in str(X), with X being any object you want? The return value of this function depends on the two <a href="http://www.rafekettler.com/magicmethods.html">magic methods</a> <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__">__str__</a> being the first choice and <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__">__repr__</a> as a fallback. But what’s the difference between them? When having a look at the docs</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">help</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
<span class="s">'Create a new string object from the given object.'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">help</span><span class="p">(</span><span class="nb">repr</span><span class="p">)</span>
<span class="s">'Return the canonical string representation of the object.'</span></code></pre></figure>

<p>they seem to be fairly similar. Let’s see them in action:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="s">'123'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">repr</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="s">'123'</span></code></pre></figure>

<p>Alright no difference for now.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="s">'Python'</span><span class="p">)</span>
<span class="s">'Python'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">repr</span><span class="p">(</span><span class="s">'Python'</span><span class="p">)</span>
<span class="s">"'Python'"</span></code></pre></figure>

<p>A second pair of quotes around our string. Why?<br />With the return value of <em>repr()</em> it should be possible to recreate our object using eval(). This function takes a string and evaluates it’s content as Python code. In our case passing <em>“‘Python’“</em> to it works, whereas <em>‘Python’</em> leads to an error cause it’s interpreted as the variable <em>Python</em> which is of course undefined. Let’s move on…</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span> 
<span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="n">now</span><span class="p">)</span>
<span class="s">'2015-04-04 20:51:31.766862'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">repr</span><span class="p">(</span><span class="n">now</span><span class="p">)</span>
<span class="s">'datetime.datetime(2015, 4, 4, 20, 51, 31, 766862)'</span></code></pre></figure>

<p>This is some significant difference. While <em>str(now)</em> computes a string containing the value of <em>now</em>, <em>repr(now)</em> again returns the Python code needed to rebuild our <em>now</em> object.&lt;/br&gt;</p>

<p>The following clues might help you to decide when to use which:</p>

<table>
  <thead>
    <tr>
      <th>str()</th>
      <th>repr()</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>- make object readable</td>
      <td>- need code that reproduces object</td>
    </tr>
    <tr>
      <td>- generate output for end user</td>
      <td>- generate output for developer</td>
    </tr>
  </tbody>
</table>

<p><br />
These points should also be considered when writing __str__ or __repr__ for your classes.</p>

<hr />
:ET