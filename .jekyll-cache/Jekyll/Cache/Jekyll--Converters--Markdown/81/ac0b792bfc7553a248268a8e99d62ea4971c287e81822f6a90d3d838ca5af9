I"t6<blockquote>
  <p>Hint: As cdk8s is fairly new at the time of this writing expect that things will change/have changed.</p>
</blockquote>

<h2 id="intro">Intro</h2>

<p><a href="https://github.com/awslabs/cdk8s">cdk8s</a> (probably cloud development kit for Kubernetes) is a new framework released by AWS Labs (AWS’s open source organization)that is written in TypeScript. It allows you to define Kubernetes manifests using modern object oriented programming languages. This enables you to develop a very flexible solution that is capable of complex operations for establishing your application deployment process to Kubernetes.</p>

<p>To achieve this cdk8s provides so called <strong>constructs</strong>, which are abstractions of Kubernetes resources (Deployment, Service, Ingress, …). A logical collection of these is called a <strong>chart</strong> (similar to a Helm chart). Finally an <strong>app</strong> is defined by one or more charts. Later on you will find an example that’ll showcase these units and their relation in more detail.</p>

<p>Now you may wonder how you can use your programming language of choice if cdk8s itself is written in TypeScript. The answer is called jsii. AWS’ <a href="https://github.com/aws/jsii">jsii</a> is a tool to generate bindings for several programming languages (currently Python, Java and C#) that allow you to interact with Type-/JavaScript classes. It is already in use by the AWS CDK (cdk8s but for <a href="https://aws.amazon.com/cloudformation/">CloudFormation</a> files) and will probably get support for more languages over time.</p>

<h2 id="usage">Usage</h2>

<p>Installing cdk8s requires you to have the standard Node.js, yarn/npm stack available on your machine. To assist with bootstrapping and generating constructs for your particular Kubernetes version the kit comes with a CLI tool. Follow the <a href="https://github.com/awslabs/cdk8s#getting-started">Getting Started section</a> to get a detailed introduction.</p>

<p>After going through the introduction we are ready to write our code. Below you find a snippet that defines a single cdk8s app consisting of a single chart containing one service and one deployment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span><span class="kn">from</span> <span class="nn">constructs</span> <span class="kn">import</span> <span class="n">Construct</span> <span class="c1"># importing base class for type hinting
</span><span class="kn">from</span> <span class="nn">cdk8s</span> <span class="kn">import</span> <span class="n">App</span><span class="p">,</span> <span class="n">Chart</span>

<span class="kn">from</span> <span class="nn">imports</span> <span class="kn">import</span> <span class="n">k8s</span> <span class="c1"># importing resource bindings for your particular Kubernetes version, previously generated by "cdk8s import"
</span>
<span class="k">class</span> <span class="nc">MyChart</span><span class="p">(</span><span class="n">Chart</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span>
               <span class="n">scope</span><span class="p">:</span> <span class="n">Construct</span><span class="p">,</span> <span class="c1"># our app instance
</span>               <span class="n">ns</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span> <span class="c1"># careful! this is not the K8s namespace but just a prefix for our resources
</span>    <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">scope</span><span class="p">,</span> <span class="n">ns</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="c1"># defining some common variables
</span>    <span class="n">label</span> <span class="o">=</span> <span class="p">{</span><span class="s">"app"</span><span class="p">:</span> <span class="s">"hello-kubernetes"</span><span class="p">}</span>
    <span class="n">container_port</span> <span class="o">=</span> <span class="mi">8080</span>

    <span class="c1"># defining a deployment with one container and two replicas
</span>    <span class="n">k8s</span><span class="p">.</span><span class="n">Deployment</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'deployment'</span><span class="p">,</span>
                   <span class="n">spec</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">DeploymentSpec</span><span class="p">(</span>
                     <span class="n">replicas</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
                     <span class="n">selector</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">LabelSelector</span><span class="p">(</span><span class="n">match_labels</span><span class="o">=</span><span class="n">label</span><span class="p">),</span>
                     <span class="n">template</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">PodTemplateSpec</span><span class="p">(</span>
                       <span class="n">metadata</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">ObjectMeta</span><span class="p">(</span><span class="n">labels</span><span class="o">=</span><span class="n">label</span><span class="p">),</span>
                       <span class="n">spec</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">PodSpec</span><span class="p">(</span><span class="n">containers</span><span class="o">=</span><span class="p">[</span>
                         <span class="n">k8s</span><span class="p">.</span><span class="n">Container</span><span class="p">(</span>
                           <span class="n">name</span><span class="o">=</span><span class="s">'hello-kubernetes'</span><span class="p">,</span>
                           <span class="n">image</span><span class="o">=</span><span class="s">'paulbouwer/hello-kubernetes:1.7'</span><span class="p">,</span>
                           <span class="n">ports</span><span class="o">=</span><span class="p">[</span><span class="n">k8s</span><span class="p">.</span><span class="n">ContainerPort</span><span class="p">(</span><span class="n">container_port</span><span class="o">=</span><span class="n">container_port</span><span class="p">)])]))))</span>

    <span class="c1"># defining a service for pods created by the deployment above
</span>    <span class="n">k8s</span><span class="p">.</span><span class="n">Service</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'service'</span><span class="p">,</span>
                <span class="n">spec</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">ServiceSpec</span><span class="p">(</span>
                  <span class="nb">type</span><span class="o">=</span><span class="s">'LoadBalancer'</span><span class="p">,</span>
                  <span class="n">ports</span><span class="o">=</span><span class="p">[</span><span class="n">k8s</span><span class="p">.</span><span class="n">ServicePort</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">target_port</span><span class="o">=</span><span class="n">k8s</span><span class="p">.</span><span class="n">IntOrString</span><span class="p">.</span><span class="n">from_number</span><span class="p">(</span><span class="n">container_port</span><span class="p">))],</span>
                  <span class="n">selector</span><span class="o">=</span><span class="n">label</span><span class="p">))</span>


<span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="p">()</span> <span class="c1"># creating an App instance
</span><span class="n">MyChart</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">)</span> <span class="c1"># installing our chart in the app under a certain namespace
</span>
<span class="n">app</span><span class="p">.</span><span class="n">synth</span><span class="p">()</span> <span class="c1"># this method call takes care of generating the K8s manifests
</span></code></pre></div></div>

<p>Executing the above code or running <code class="language-plaintext highlighter-rouge">cdk8s synth</code> results in the following manifest.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hello-deployment-c51e9e6b</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hello-kubernetes</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hello-kubernetes</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">paulbouwer/hello-kubernetes:1.7</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">hello-kubernetes</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hello-service-9878228b</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hello-kubernetes</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
</code></pre></div></div>

<p>As you can see in this simple example cdk8s takes care of creating a one to one translation of your objects into a Kubernetes manifest. Take into consideration that cdk8s’ structs are very explicit. They do not provide any kind of defaults (e.g. for the replica count) or detect any relations between objects (e.g. detecting the container port and using it for the service). This is where you come into play and develop charts that implement your desired logic. On the one hand this could be a generic chart that creates a Deployment and a Service manifest for an arbitrary container image. On the other hand it could be a chart creating a ConfigMap that dynamically pulls its values out of your key value store. You can achieve whatever your chosen programming language is capable of.</p>

<h2 id="comparison-against-kustomize-and-helm">Comparison against kustomize and Helm</h2>

<p>After reading to this point you may think why you shouldn’t just keep using tools like <a href="https://github.com/kubernetes-sigs/kustomize">kustomize</a> or <a href="https://helm.sh/">Helm</a> and in most cases you are probably right in doing so.</p>

<p>Depending on your background kustomize and Helm may be easier to learn. They don’t require you to write actual code but use a templating language. This allows you to do simple operations, like variable replacement, conditional blocks or for-loops. But as soon as you require more complex functionality or need to communicate with external services you’re gonna run into the limits of these tools.</p>

<p>In my opinion cdk8s is one of the next obvious steps in the DevOps movement, bringing Ops people closer to the development and enabling developers to take over Ops tasks. As infrastructure gets more and more dynamic and complex the need for powerful application deployment orchestration rises.</p>

<h2 id="personal-opinion">Personal Opinion</h2>

<p>Would I use cdk8s in production today? No, there’s no stable version yet and the development is very active, making it unavoidable to break your setup from time to time. Instead I’m going to keep an eye on its progress and use it for some of my side projects. After cdk8s reaches a certain level of maturity (probably the first major version) I will definitely consider using it for new projects.</p>

<p>Are you already using cdk8s and have some questions or experiences to share? Feel free to let me know. (y)</p>

<hr />
:ET